```
import Data.Char (toUpper)
import Data.List (delete)

spellWith :: [String] -> String -> [[String]]
spellWith _ [] = [[]]
spellWith blocks (x : xs) = blocks >>= go
  where
    go b
      | x `elem` b = (b :) <$> spellWith (delete b blocks) xs
      | otherwise = []

main :: IO ()
main = do
  let testCases = [ "",
                    "A",
                    "BARK",
                    "BoOK",
                    "TrEAT",
                    "COmMoN",
                    "SQUAD",
                    "conFUsE"
                  ]
  mapM_
    ( \testCase -> print $ ((,) <*>) (not . null . spellWith blocks . fmap toUpper) testCase)
    testCases

blocks :: [String]
blocks = words $ "BO XK DQ CP NA GT RE TG QD FS JW" <> " HU VI AN OB ER FS LY PC ZM"
```