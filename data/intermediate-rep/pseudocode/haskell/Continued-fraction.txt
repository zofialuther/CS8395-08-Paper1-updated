```
1. Import Data.Ratio ((%), denominator, numerator)
2. Import Data.Bool (bool)

3. Define pie as zip (0 : [1,3 ..]) (4 : map (^ 2) [1 ..])
4. Define sqrt2 as zip (1 : repeat 2) (repeat 1)
5. Define napier as zip (2 : [1 ..]) (1 : [1 ..])

6. Define cf2rat n as 
    - foldr (\(a, b) f -> (a % 1) + ((b % 1) / f)) (1 % 1) . take n

7. Define cf2rat_p p s as 
    - f $ map ((\i -> (cf2rat i s, cf2rat (1 + i) s)) . (2 ^)) [0 ..]
    - where
        - f ((x, y):ys)
          - if abs (x - y) < (1 / fromIntegral p) then
              - return x
          - else
              - f ys

8. Define cf2dec n as 
    - ratstr n . cf2rat_p (10 ^ n)
    - where
        - ratstr l a = 
            - show t ++ '.' : fracstr l n d
            - where
                - d = denominator a
                - (t, n) = quotRem (numerator a) d
                - fracstr 0 _ _ = []
                - fracstr l n d = 
                    - show t ++ fracstr (l - 1) n1 d
                    - where
                        - (t, n1) = quotRem (10 * n) d

9. Define main as 
    - mapM_ putStrLn [cf2dec 200 sqrt2, cf2dec 200 napier, cf2dec 200 pie]
```