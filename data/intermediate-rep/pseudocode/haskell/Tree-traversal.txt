```
FUNCTION preorder(node)
  IF node is Empty
    RETURN []
  ELSE
    RETURN [node.value] + preorder(node.left) + preorder(node.right)

FUNCTION inorder(node)
  IF node is Empty
    RETURN []
  ELSE
    RETURN inorder(node.left) + [node.value] + inorder(node.right)

FUNCTION postorder(node)
  IF node is Empty
    RETURN []
  ELSE
    RETURN postorder(node.left) + postorder(node.right) + [node.value]

FUNCTION levelorder(node)
  queue = [node]
  result = []
  WHILE queue is not empty
    current = queue.dequeue()
    IF current is not Empty
      result.append(current.value)
      queue.enqueue(current.left)
      queue.enqueue(current.right)
  RETURN result

tree = Node(1, Node(2, Node(4, Node(7, Empty, Empty), Empty), Node(5, Empty, Empty)), Node(3, Node(6, Node(8, Empty, Empty), Node(9, Empty, Empty)), Empty))

asciiTree = "         1\n        / \\\n       /   \\\n      /     \\\n     2       3\n    / \\     /\n   4   5   6\n  /       / \\\n 7       8   9"

FUNCTION main()
  PRINT asciiTree
  FOR i = 0 to 3
    traversal = [preorder, inorder, postorder, levelorder][i](tree)
    PRINT justifyLeft(14, ' ', ["preorder", "inorder", "postorder", "level-order"][i] + ":") + unwords(traversal)
  END FOR
END FUNCTION

FUNCTION justifyLeft(n, c, s)
  RETURN take(n, s + repeat(n, c))
END FUNCTION
```