START
    IMPORT java.awt.*
    IMPORT java.awt.event.*
    IMPORT static java.lang.Math.*
    IMPORT javax.swing.*

    CLASS Cuboid EXTENDS JPanel
        DECLARE double[][] nodes = {{-1, -1, -1}, {-1, -1, 1}, {-1, 1, -1}, {-1, 1, 1},
            {1, -1, -1}, {1, -1, 1}, {1, 1, -1}, {1, 1, 1}}
        
        DECLARE int[][] edges = {{0, 1}, {1, 3}, {3, 2}, {2, 0}, {4, 5}, {5, 7}, {7, 6},
            {6, 4}, {0, 4}, {1, 5}, {2, 6}, {3, 7}}
        
        DECLARE int mouseX, prevMouseX, mouseY, prevMouseY
        
        Cuboid() 
            setPreferredSize(new Dimension(640, 640))
            setBackground(Color.white)
            
            scale(80, 120, 160)
            rotateCube(PI / 5, PI / 9)
            
            addMouseListener(new MouseAdapter() 
                mousePressed(MouseEvent e) 
                    mouseX = e.getX()
                    mouseY = e.getY()
                
                mouseDragged(MouseEvent e) 
                    prevMouseX = mouseX
                    prevMouseY = mouseY
                    mouseX = e.getX()
                    mouseY = e.getY()

                    DECLARE double incrX = (mouseX - prevMouseX) * 0.01
                    DECLARE double incrY = (mouseY - prevMouseY) * 0.01

                    rotateCube(incrX, incrY)
                    repaint()
                
            )
        
        scale(double sx, double sy, double sz) 
            FOR EACH node IN nodes
                node[0] *= sx
                node[1] *= sy
                node[2] *= sz
        
        rotateCube(double angleX, double angleY) 
            DECLARE sinX = sin(angleX)
            DECLARE cosX = cos(angleX)

            DECLARE sinY = sin(angleY)
            DECLARE cosY = cos(angleY)

            FOR EACH node IN nodes
                DECLARE x = node[0]
                DECLARE y = node[1]
                DECLARE z = node[2]

                node[0] = x * cosX - z * sinX
                node[2] = z * cosX + x * sinX

                z = node[2]

                node[1] = y * cosY - z * sinY
                node[2] = z * cosY + y * sinY
        
        drawCube(Graphics2D g) 
            g.translate(getWidth() / 2, getHeight() / 2)

            FOR EACH edge IN edges
                DECLARE xy1 = nodes[edge[0]]
                DECLARE xy2 = nodes[edge[1]]
                g.drawLine((int) round(xy1[0]), (int) round(xy1[1]),
                    (int) round(xy2[0]), (int) round(xy2[1])
            
            FOR EACH node IN nodes
                g.fillOval((int) round(node[0]) - 4, (int) round(node[1]) - 4, 8, 8)
        
        paintComponent(Graphics gg) 
            super.paintComponent(gg)
            Graphics2D g = (Graphics2D) gg
            g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON)

            drawCube(g)
        
        main(String[] args) 
            SwingUtilities.invokeLater(() -> 
                JFrame f = new JFrame()
                f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)
                f.setTitle("Cuboid")
                f.setResizable(false)
                f.add(new Cuboid(), BorderLayout.CENTER)
                f.pack()
                f.setLocationRelativeTo(null)
                f.setVisible(true)
            )
END