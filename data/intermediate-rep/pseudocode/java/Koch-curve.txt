```
function main(aArgs)
    points = initialEquilateralTriangle()
    for i = 1 to 4
        points = nextIteration(points)
    end for
    text = kochCurveText(points, IMAGE_SIZE)
    writeToFile(text)
end function

function initialEquilateralTriangle()
    margin = 50
    boxSize = IMAGE_SIZE - margin
    sideLength = round(boxSize * SIN_60_DEGREES)
    x = (boxSize + margin - sideLength) / 2
    y = round((boxSize + margin) / 2 - sideLength * SIN_60_DEGREES / 3)
    points = [
        Point(x, y),
        Point(x + sideLength / 2, y + sideLength * SIN_60_DEGREES),
        Point(x + sideLength, y),
        Point(x, y)
    ]
    return points
end function

function nextIteration(aPoints)
    result = []
    for i = 0 to aPoints.size() - 1
        x0 = aPoints[i].x
        y0 = aPoints[i].y
        x1 = aPoints[i + 1].x
        y1 = aPoints[i + 1].y
        dy = y1 - y0
        dx = x1 - x0
        result.add(aPoints[i])
        result.add(Point(x0 + dx / 3, y0 + dy / 3))
        result.add(Point(round(x0 + dx / 2 - dy * SIN_60_DEGREES / 3), round(y0 + dy / 2 + dx * SIN_60_DEGREES / 3)))
        result.add(Point(x0 + 2 * dx / 3, y0 + 2 * dy / 3))
    end for
    result.add(aPoints[aPoints.size() - 1])
    return result
end function

function kochCurveText(aPoints, aSize)
    text = "<svg xmlns='http://www.w3.org/2000/svg' width='" + aSize + "' height='" + aSize + "'>\n"
    text += "<rect style='width:100%;height:100%;fill:cyan'/>\n"
    text += "<polygon points='"
    for i = 0 to aPoints.size() - 1
        text += aPoints[i].x + ", " + aPoints[i].y + " "
    end for
    text += "' style='fill:pink;stroke:black;stroke-width:2'/>\n</svg>\n"
    return text
end function

IMAGE_SIZE = 700
SIN_60_DEGREES = (float) sin(PI / 3.0)
```