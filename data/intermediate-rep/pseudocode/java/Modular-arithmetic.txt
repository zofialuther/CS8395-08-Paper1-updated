```
class ModularArithmetic {
    interface Ring<T> {
        Ring<T> plus(Ring<T> rhs)

        Ring<T> times(Ring<T> rhs)

        int value()

        Ring<T> one()

        default Ring<T> pow(int p) {
            if (p < 0) {
                throw new IllegalArgumentException("p must be zero or greater")
            }

            int pp = p
            Ring<T> pwr = this.one()
            while (pp-- > 0) {
                pwr = pwr.times(this)
            }
            return pwr
        }
    }

    class ModInt implements Ring<ModInt> {
        int value
        int modulo

        ModInt(int value, int modulo) {
            this.value = value
            this.modulo = modulo
        }

        Ring<ModInt> plus(Ring<ModInt> other) {
            if (!(other instanceof ModInt)) {
                throw new IllegalArgumentException("Cannot add an unknown ring.")
            }
            ModInt rhs = (ModInt) other
            if (modulo != rhs.modulo) {
                throw new IllegalArgumentException("Cannot add rings with different modulus")
            }
            return new ModInt((value + rhs.value) % modulo, modulo)
        }

        Ring<ModInt> times(Ring<ModInt> other) {
            if (!(other instanceof ModInt)) {
                throw new IllegalArgumentException("Cannot multiply an unknown ring.")
            }
            ModInt rhs = (ModInt) other
            if (modulo != rhs.modulo) {
                throw new IllegalArgumentException("Cannot multiply rings with different modulus")
            }
            return new ModInt((value * rhs.value) % modulo, modulo)
        }

        int value() {
            return value
        }

        Ring<ModInt> one() {
            return new ModInt(1, modulo)
        }

        toString() {
            return String.format("ModInt(%d, %d)", value, modulo)
        }
    }

    <T> Ring<T> f(Ring<T> x) {
        return x.pow(100).plus(x).plus(x.one())
    }

    main(args) {
        ModInt x = new ModInt(10, 13)
        Ring<ModInt> y = f(x)
        print "x ^ 100 + x + 1 for x = ModInt(10, 13) is "
        print y
        flush()
    }
}
```