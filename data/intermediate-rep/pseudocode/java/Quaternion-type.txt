```
Class Quaternion
    private final double a, b, c, d
    
    Method Quaternion(a, b, c, d)
        this.a = a
        this.b = b
        this.c = c
        this.d = d
    
    Method Quaternion(r)
        this(r, 0.0, 0.0, 0.0)
    
    Method norm()
        Return Math.sqrt(a * a + b * b + c * c + d * d)
    
    Method negative()
        Return new Quaternion(-a, -b, -c, -d)
    
    Method conjugate()
        Return new Quaternion(a, -b, -c, -d)
    
    Method add(r)
        Return new Quaternion(a + r, b, c, d)
    
    Method static add(q, r)
        Return q.add(r)
    
    Method static add(r, q)
        Return q.add(r)
    
    Method add(q)
        Return new Quaternion(a + q.a, b + q.b, c + q.c, d + q.d)
    
    Method static add(q1, q2)
        Return q1.add(q2)
    
    Method times(r)
        Return new Quaternion(a * r, b * r, c * r, d * r)
    
    Method static times(q, r)
        Return q.times(r)
    
    Method static times(r, q)
        Return q.times(r)
    
    Method times(q)
        Return new Quaternion(
            a * q.a - b * q.b - c * q.c - d * q.d,
            a * q.b + b * q.a + c * q.d - d * q.c,
            a * q.c - b * q.d + c * q.a + d * q.b,
            a * q.d + b * q.c - c * q.b + d * q.a
        )
    
    Method static times(q1, q2)
        Return q1.times(q2)
    
    Method override equals(obj)
        If (!(obj instanceof Quaternion)) 
            Return false
        End If
        Set other = (Quaternion) obj
        If (Double.doubleToLongBits(this.a) != Double.doubleToLongBits(other.a)) 
            Return false
        End If
        If (Double.doubleToLongBits(this.b) != Double.doubleToLongBits(other.b)) 
            Return false
        End If
        If (Double.doubleToLongBits(this.c) != Double.doubleToLongBits(other.c)) 
            Return false
        End If
        If (Double.doubleToLongBits(this.d) != Double.doubleToLongBits(other.d)) 
            Return false
        End If
        Return true
    
    Method override toString()
        Return String.format("%.2f + %.2fi + %.2fj + %.2fk", a, b, c, d).replaceAll("\\+ -", "- ")
    
    Method toQuadruple()
        Return String.format("(%.2f, %.2f, %.2f, %.2f)", a, b, c, d)
    
    Method static main(args)
        Set q = new Quaternion(1.0, 2.0, 3.0, 4.0)
        Set q1 = new Quaternion(2.0, 3.0, 4.0, 5.0)
        Set q2 = new Quaternion(3.0, 4.0, 5.0, 6.0)
        Set r = 7.0
        Print "q       = " + q.toString()
        Print "q1      = " + q1.toString()
        Print "q2      = " + q2.toString()
        Print "r       = " + r
        Print "||q||   = " + q.norm()
        Print "-q      = " + q.negative().toString()
        Print "q*      = " + q.conjugate().toString()
        Print "q + r   = " + q.add(r).toString()
        Print "q1 + q2 = " + q1.add(q2).toString()
        Print "q * r   = " + q.times(r).toString()
        Set q1q2 = q1.times(q2)
        Set q2q1 = q2.times(q1)
        Print "q1 * q2 = " + q1q2.toString()
        Print "q2 * q1 = " + q2q1.toString()
        If (q1q2.equals(q2q1)) 
            Print "q1 * q2 = q2 * q1"
        Else 
            Print "q1 * q2 â‰  q2 * q1"
        End If
    End Method
End Class
```