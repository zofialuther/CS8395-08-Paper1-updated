```
class Node<T> {
  T value
  Node<T> left
  Node<T> right

  Node(T value) {
    this.value = value
  }

  visit() {
    Print this.value + " "
  }
}

enum ORDER {
  PREORDER, INORDER, POSTORDER, LEVEL
}

traverse(Node<T> node, ORDER order) {
  if node == null {
    return
  }
  switch order {
    case PREORDER:
      node.visit()
      traverse(node.left, order)
      traverse(node.right, order)
      break
    case INORDER:
      traverse(node.left, order)
      node.visit()
      traverse(node.right, order)
      break
    case POSTORDER:
      traverse(node.left, order)
      traverse(node.right, order)
      node.visit()
      break
    case LEVEL:
      Queue<Node<T>> queue = new LinkedList<>()
      queue.add(node)
      while queue is not empty {
        Node<T> next = queue.remove()
        next.visit()
        if next.left is not null
          queue.add(next.left)
        if next.right is not null
          queue.add(next.right)
      }
  }
}  

main(args) {
  Node<Integer> one = new Node<Integer>(1)
  Node<Integer> two = new Node<Integer>(2)
  Node<Integer> three = new Node<Integer>(3)
  Node<Integer> four = new Node<Integer>(4)
  Node<Integer> five = new Node<Integer>(5)
  Node<Integer> six = new Node<Integer>(6)
  Node<Integer> seven = new Node<Integer>(7)
  Node<Integer> eight = new Node<Integer>(8)
  Node<Integer> nine = new Node<Integer>(9)
  
  one.left = two
  one.right = three
  two.left = four
  two.right = five
  three.left = six
  four.left = seven
  six.left = eight
  six.right = nine

  traverse(one, ORDER.PREORDER)
  Print new line
  traverse(one, ORDER.INORDER)
  Print new line
  traverse(one, ORDER.POSTORDER)
  Print new line
  traverse(one, ORDER.LEVEL)
}
```