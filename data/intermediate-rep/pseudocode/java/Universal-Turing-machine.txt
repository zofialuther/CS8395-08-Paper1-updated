```
CLASS UTM
  PRIVATE List tape
  PRIVATE String blankSymbol
  PRIVATE ListIterator head
  PRIVATE Map transitions
  PRIVATE Set terminalStates
  PRIVATE String initialState

  FUNCTION UTM(transitions, terminalStates, initialState, blankSymbol)
    this.blankSymbol = blankSymbol
    FOR EACH t IN transitions
      this.transitions.put(t.from, t)
    END FOR
    this.terminalStates = terminalStates
    this.initialState = initialState
  END FUNCTION

  CLASS StateTapeSymbolPair
    PRIVATE String state
    PRIVATE String tapeSymbol

    FUNCTION StateTapeSymbolPair(state, tapeSymbol)
      this.state = state
      this.tapeSymbol = tapeSymbol
    END FUNCTION

    FUNCTION hashCode()
      // Auto-generated by Eclipse
    END FUNCTION

    FUNCTION equals(obj)
      // Auto-generated by Eclipse
    END FUNCTION

    FUNCTION toString()
      RETURN "(" + state + "," + tapeSymbol + ")"
    END FUNCTION
  END CLASS

  CLASS Transition
    PRIVATE StateTapeSymbolPair from
    PRIVATE StateTapeSymbolPair to
    PRIVATE int direction

    FUNCTION Transition(from, to, direction)
      this.from = from
      this.to = to
      this.direction = direction
    END FUNCTION

    FUNCTION toString()
      RETURN from + "=>" + to + "/" + direction
    END FUNCTION
  END CLASS

  FUNCTION initializeTape(input)
    tape = input
  END FUNCTION

  FUNCTION initializeTape(input)
    tape = new LinkedList()
    FOR i = 0 TO input.length()
      tape.add(input.charAt(i) + "")
    END FOR
  END FUNCTION

  FUNCTION runTM()
    IF tape.size() == 0 THEN
      tape.add(blankSymbol)
    END IF
    head = tape.listIterator()
    head.next()
    head.previous()
    tsp = new StateTapeSymbolPair(initialState, tape.get(0))
    WHILE transitions.containsKey(tsp)
      PRINT this + " --- " + transitions.get(tsp)
      trans = transitions.get(tsp)
      head.set(trans.to.tapeSymbol)
      tsp.state = trans.to.state
      IF trans.direction == -1 THEN
        IF NOT head.hasPrevious() THEN
          head.add(blankSymbol)
        END IF
        tsp.tapeSymbol = head.previous()
      ELSE IF trans.direction == 1 THEN
        head.next()
        IF NOT head.hasNext() THEN
          head.add(blankSymbol)
          head.previous()
        END IF
        tsp.tapeSymbol = head.next()
        head.previous()
      ELSE
        tsp.tapeSymbol = trans.to.tapeSymbol
      END IF
    END WHILE
    PRINT this + " --- " + tsp
    IF terminalStates.contains(tsp.state) THEN
      RETURN tape
    ELSE
      RETURN NULL
    END IF
  END FUNCTION

  FUNCTION toString()
    TRY
      headPos = head.previousIndex()
      s = "[ "
      FOR i = 0 TO headPos
        s = s + tape.get(i) + " "
      END FOR
      s = s + "[H] "
      FOR i = headPos + 1 TO tape.size()
        s = s + tape.get(i) + " "
      END FOR
      RETURN s + "]"
    CATCH Exception e
      RETURN ""
    END TRY
  END FUNCTION

  FUNCTION main(args)
    init = "q0"
    blank = "b"
    term = new HashSet()
    term.add("qf")
    trans = new HashSet()
    trans.add(new Transition(new StateTapeSymbolPair("q0", "1"), new StateTapeSymbolPair("q0", "1"), 1))
    trans.add(new Transition(new StateTapeSymbolPair("q0", "b"), new StateTapeSymbolPair("qf", "1"), 0))
    machine = new UTM(trans, term, init, blank)
    machine.initializeTape("111")
    PRINT "Output (si): " + machine.runTM()
    // Continue with other test cases
  END FUNCTION
END CLASS
```