```
FUNCTION factors(N, Flist):
    factors(N, 2, 0, Flist)

FUNCTION factors(1, _, _, []):
    return
FUNCTION factors(_, _, Cnt, []):
    IF Cnt > 1
        return
    factors(N, Start, Cnt, [Fac|FList]):
        N1 = floor(sqrt(N)
        FOR Fac from Start to N1:
            IF N mod Fac = 0
                N2 = N div Fac
                Cnt1 = Cnt + 1
                factors(N2, Fac, Cnt1, FList)
        IF N >= 2
            ADD N to Flist

FUNCTION brilliantList(Start, Limit, List):
    findall N where brilliants(Start, Limit, N) into List

FUNCTION nextBrilliant(Start, N):
    brilliants(Start, inf, N)

FUNCTION isBrilliant(N):
    brilliants(2, inf, N)

FUNCTION brilliants(Start, Limit, N):
    FOR N from Start to Limit:
        IF factors(N, [F1, F2]) AND F1 * F2 = N:
            D1 = digits(F1)
            D2 = digits(F2)
            IF D1 = D2
                RETURN N

FUNCTION digits(N, D):
    D = 1 + floor(log10(N))

FUNCTION run(LimitList):
    run(LimitList, 0, 2)

FUNCTION run([], _, _):
    return

FUNCTION run([Limit|LList], OldCount, OldLimit):
    Limit1 = Limit - 1
    statistics(runtime, [Start|_])
    brilliantList(OldLimit, Limit1, BList)
    Cnt = length(BList)
    Cnt1 = OldCount + Cnt
    Index = Cnt1 + 1
    nextBrilliant(Limit, Bril)
    statistics(runtime, [Stop|_])
    Time = Stop - Start
    writef('first >=%8r is%8r at position%6r [time:%6r]', [Limit, Bril, Index, Time])
    run(LList, Cnt1, Limit)

FUNCTION showList(List, Limit):
    findnsols(Limit, X, (member(X, List), writef('%5r', [X])), _)
    return

FUNCTION do:
    findnsols(100, B, isBrilliant(B), BList)
    showList(BList, 10)
    LimitList = findall N where (between(1, 6, X), N is 10^X)
    run(LimitList)
```