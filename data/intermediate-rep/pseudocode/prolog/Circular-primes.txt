```
Load library(primality)

circular(N):
    if N is a member of [2, 3, 5, 7]:
        return true
    else:
        limit(15, (
            candidate(N),
            if N > 9 and circular_prime(N):
                return true
        ))

circular(r(K)):
    for K from 6 to infinity:
        N = (10^K - 1) / 9
        if N is a prime number:
            return true

candidate(0):
    return
candidate(N):
    for each M in candidate:
        for each D in [1, 3, 7, 9]:
            N = 10*M + D

circular_prime(N):
    K = floor(log10(N)) + 1
    circular_prime(N, N, K)

circular_prime(_, _, 0):
    return
circular_prime(P0, P, K):
    if P >= P0 and P is prime:
        rotate(P, Q)
        K = K - 1
        circular_prime(P0, Q, K)

rotate(N, M):
    D = floor(log10(N))
    (Q, R) = divmod(N, 10)
    M = R*10^D + Q

main:
    S = findall(P, limit(23, circular(P)))
    format("The first 23 circular primes:~n~w~n", [S])
    halt

main()
```