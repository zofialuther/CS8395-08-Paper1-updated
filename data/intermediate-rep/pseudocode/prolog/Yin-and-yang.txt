function ying_yang(N) {
  R = N * 100
  Title = 'Yin Yang ' + N
  W = new window(Title)
  Wh = new colour(@default, 255*255, 255*255, 255*255)
  Bl = new colour(@default, 0, 0, 0)
  CX = R + 50
  CY = R + 50
  R1 = R / 2
  R2 = R / 8
  CY1 = R1 + 50
  CY2 = 3 * R1 + 50
  E = new semi_disk(point(CX, CY), R, 'w', Bl)
  F = new semi_disk(point(CX, CY), R, 'e', Wh)
  D1 = new disk(point(CX, CY1), R, Bl)
  D2 = new disk(point(CX, CY2), R, Wh)
  D3 = new disk(point(CX, CY1), R2, Wh)
  D4 = new disk(point(CX, CY2), R2, Bl)
  W.display(E, F, D1, D2, D3, D4)
  WD = 2 * R + 100
  W.size(size(WD, WD))
  W.open()
}

class semi_disk extends path {
  initialise(C, R, O, Col) {
    this.super()
    CX = C.x
    CY = C.y
    choose(O, Deb, End)
    for (I = Deb; I <= End; I++) {
      X = R * cos(I * Math.PI/180) + CX
      Y = R * sin(I * Math.PI/180) + CY
      this.append(point(X, Y))
    }
    this.closed(true)
    this.fill_pattern(Col)
  }
}

function choose(O, Deb, End) {
  if (O === 's') {
    Deb = 0
    End = 180
  } else if (O === 'n') {
    Deb = 180
    End = 360
  } else if (O === 'w') {
    Deb = 90
    End = 270
  } else if (O === 'e') {
    Deb = -90
    End = 90
  }
}

class disk extends ellipse {
  initialise(C, R, Col) {
    this.super(R, R)
    this.center(C)
    this.pen(0)
    this.fill_pattern(Col)
  }
}