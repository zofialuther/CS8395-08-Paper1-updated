'''
Declare a function called zodiacNames with no arguments
    Return a dictionary with the keys 'tian', 'di', 'wu', 'sx', 'yy' and their respective values as follows:
        - 'tian' key has a value of a list of tuples generated by zipping the lists of characters '甲乙丙丁戊己庚辛壬癸' and 'jiă yĭ bĭng dīng wù jĭ gēng xīn rén gŭi'
        - 'di' key has a value of a list of tuples generated by zipping the lists of characters '子丑寅卯辰巳午未申酉戌亥' and 'zĭ chŏu yín măo chén sì wŭ wèi shēn yŏu xū hài'
        - 'wu' key has a value of the list of lists ['木火土金水', 'mù huǒ tǔ jīn shuǐ', 'wood fire earth metal water']
        - 'sx' key has a value of the list of lists ['鼠牛虎兔龍蛇馬羊猴鸡狗豬', 'shǔ niú hǔ tù lóng shé mǎ yáng hóu jī gǒu zhū', 'rat ox tiger rabbit dragon snake horse goat monkey rooster dog pig']
        - 'yy' key has a value of the list of lists ['阳阴', 'yáng yīn']

Declare a function called zodiacYear that takes a dictionary as an argument
    Declare a function called tokens that takes a year as an argument
        Calculate iYear by subtracting 4 from the given year
        Calculate iStem by getting the remainder of iYear divided by 10
        Calculate iBranch by getting the remainder of iYear divided by 12
        Set hStem and pStem to the values of the respective indexes in the 'tian' dictionary using iStem
        Set hBranch and pBranch to the values of the respective indexes in the 'di' dictionary using iBranch
        Set yy to the remainder of iYear divided by 2
        Return a list containing three lists:
            - A list containing the given year as a string and two empty strings
            - A list containing hStem + hBranch, pStem + pBranch, and the remainder of iYear divided by 60 + 1 as strings
            - A list containing the elements in the 'wu' dictionary at index iStem // 2
            - A list containing the elements in the 'sx' dictionary at index iBranch
            - A list containing the elements in the 'yy' dictionary at index yy and 'dark' if yy is 1, otherwise 'light'
    Return the tokens function

Declare a function called main with no arguments
    Print the result of joining the list of values generated by mapping the zodiacTable function with the 'zodiacNames' dictionary as an argument over the list [1935, 1938, 1949, 1968, 1972, 1976, the current year]

Declare a function called zodiacTable that takes a dictionary as an argument and returns a function that takes a year as an argument
    Return the result of calling the wikiTable function with a dictionary containing the class and colwidth as the first argument and the result of transposing the result of calling the zodiacYear function with the given year as the second argument

Declare a function called wikiTable that takes a dictionary as an argument and returns a function that takes a list of lists as an argument
    Declare a function called colWidth that returns the value of 'width:' + the value of the 'colwidth' key in the given dictionary + '; ' if the 'colwidth' key exists, otherwise an empty string
    Declare a function called cellStyle that returns the value of the 'cell' key in the given dictionary
    Return a wiki table string by concatenating the following strings:
        - '{| ' and the result of reducing the dictionary to a string with the class and style keys as attributes
        - '\n' and '\n|-' joined with the result of mapping a function over the given list of lists that concatenates '|style="' + the result of calling colWidth and cellStyle + '"|' with the string representation of each element in the row
        - '\n|}' and '\n\n'

Declare a function called transpose that takes a matrix as an argument
    If the matrix is not empty:
        - Set inner to the type of the first element in the matrix
        - Set z to the result of zipping the matrix
        - Return the result of mapping the inner type over z if the inner type is a tuple, otherwise return z
    Otherwise, return the matrix

If the __name__ is equal to '__main__':
    Call the main function
'''