```
import random

function is_Prime(n)
    if n is not an integer
        return false
    n = integer(n)
    if n is 0 or n is 1 or n is 4 or n is 6 or n is 8 or n is 9
        return false
    if n is 2 or n is 3 or n is 5 or n is 7
        return true
    s = 0
    d = n - 1
    while d % 2 is 0
        d = d >> 1
        s = s + 1
    assert(2^s * d == n - 1)
    function trial_composite(a)
        if a^d mod n is 1
            return false
        for i in range 0 to s
            if a^(2^i * d) mod n is n - 1
                return false
        return true
    for i in range 1 to 8
        a = random number between 2 and n
        if trial_composite(a)
            return false
    return true

function isPrime(n)
    if n is less than or equal to 1
        return false
    if n is less than or equal to 3
        return true
    if n mod 2 is 0 or n mod 3 is 0
        return false
    i = 5
    while i * i is less than or equal to n
        if n mod i is 0 or n mod (i + 2) is 0
            return false
        i = i + 6
    return true

function rotations(n)
    a = string(n)
    return set of int(a[i:] + a[:i]) for i in range length of a

function isCircular(n)
    return true if all isPrime(int(o)) for o in rotations(n) else false

function main()
    result = [2, 3, 5, 7]
    first = '137'
    latter = '1379'
    for i in range 1 to 6
        s = set of int(''.join(a)) for a in product(first, *((latter,) * i))
        while s is not empty
            a = s.pop()
            b = rotations(a)
            if isCircular(a)
                result.append(min(b))
            s -= b
    result.sort()
    return result

assert [2, 3, 5, 7, 11, 13, 17, 37, 79, 113, 197, 199, 337, 1193, 3779, 11939, 19937, 193939, 199933] == main()

repunit = lambda n: int('1' * n)

function repmain(n)
    result = []
    i = 2
    while length of result is less than n
        if is_Prime(repunit(i))
            result.append(i)
        i = i + 1
    return result

assert [2, 19, 23, 317, 1031] == repmain(5)
```