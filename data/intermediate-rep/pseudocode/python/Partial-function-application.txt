from functools import partial

# Define a function fs that takes in a function f and a sequence s
# The function returns a new list where each element is the result of applying f to each element in s
def fs(f, s): 
    return [f(value) for value in s]

# Define two functions f1 and f2
def f1(value): 
    return value * 2

def f2(value): 
    return value ** 2

# Create partial functions fsf1 and fsf2 using the fs function and f1 and f2
fsf1 = partial(fs, f1)
fsf2 = partial(fs, f2)

# Define a sequence s
s = [0, 1, 2, 3]

# Assert that applying f1 and f2 to s using the fs function is the same as using the partial functions fsf1 and fsf2
assert fs(f1, s) == fsf1(s) # ==  [0, 2, 4, 6]
assert fs(f2, s) == fsf2(s) # ==  [0, 1, 4, 9]

# Redefine the sequence s
s = [2, 4, 6, 8]

# Assert that applying f1 and f2 to the new s using the fs function is the same as using the partial functions fsf1 and fsf2
assert fs(f1, s) == fsf1(s) # ==  [4, 8, 12, 16]
assert fs(f2, s) == fsf2(s) # ==  [4, 16, 36, 64]