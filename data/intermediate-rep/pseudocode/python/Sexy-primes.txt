```
CONST LIMIT = 1_000_035

FUNCTION primes2(limit=LIMIT):
    IF limit < 2:
        RETURN []
    END IF
    IF limit < 3:
        RETURN [2]
    END IF
    lmtbf = (limit - 3) // 2
    buf = [True] * (lmtbf + 1)
    FOR i in range((int(limit ** 0.5) - 3) // 2 + 1):
        IF buf[i]:
            p = i + i + 3
            s = p * (i + 1) + i
            buf[s::p] = [False] * ((lmtbf - s) // p + 1)
    END FOR
    RETURN [2] + [i + i + 3 for i, v in enumerate(buf) if v]
END FUNCTION

primes = primes2(LIMIT +6)
primeset = SET(primes)
primearray = []
FOR n in range(LIMIT):
    primearray.append(n in primeset)
END FOR

s = []
FOR x in range(4):
    s.append([])
END FOR
unsexy = []

FOR p in primes:
    IF p > LIMIT:
        BREAK
    END IF
    IF p + 6 in primeset AND p + 6 < LIMIT:
        s[0].append((p, p+6))
    ELSE IF p + 6 in primeset:
        BREAK
    ELSE
        IF p - 6 not in primeset:
            unsexy.append(p)
        END IF
        CONTINUE
    END IF
    IF p + 12 in primeset AND p + 12 < LIMIT:
        s[1].append((p, p+6, p+12))
    ELSE
        CONTINUE
    END IF
    IF p + 18 in primeset AND p + 18 < LIMIT:
        s[2].append((p, p+6, p+12, p+18))
    ELSE
        CONTINUE
    END IF
    IF p + 24 in primeset AND p + 24 < LIMIT:
        s[3].append((p, p+6, p+12, p+18, p+24))
    END IF
END FOR

PRINT('"SEXY" PRIME GROUPINGS:')
FOR EACH sexy, name IN ZIP(s, 'pairs triplets quadruplets quintuplets'.split()):
    PRINT(f'  {LENGTH(sexy)} {name} (not isPrime(n-6))))) |> Array.ofSeq
printfn "There are %d unsexy primes less than 1,000,035. The last 10 are:" n.Length
Array.skip (n.Length-10) n |> Array.iter(fun n->printf "%d " n); printfn ""
let ni=pCache |> Seq.takeWhile(fun n->nme} ending with ...')
    FOR EACH sx IN sexy[-5:]:
        PRINT('   ',sx)

PRINT(f'\nThere are {LENGTH(unsexy)} unsexy primes ending with ...')
FOR EACH usx IN unsexy[-10:]:
    PRINT(' ',usx)
END FOR
```