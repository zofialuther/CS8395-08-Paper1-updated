```
irregularOrdinals = {
	"one":    "first",
	"two":    "second",
	"three":  "third",
	"five":   "fifth",
	"eight":  "eighth",
	"nine":   "ninth",
	"twelve": "twelfth",
}

function num2ordinal(n):
    conversion = convert n to integer
    num = spell_integer(conversion)
    hyphen = num.rsplit("-", 1)
    num = num.rsplit(" ", 1)
    delim = " "
    if length of num[-1] > length of hyphen[-1]:
        num = hyphen
        delim = "-"

    if num[-1] in irregularOrdinals:
        num[-1] = delim + irregularOrdinals[num[-1]]
    else if num[-1] ends with "y":
        num[-1] = delim + num[-1][:-1] + "ieth"
    else:
        num[-1] = delim + num[-1] + "th"
    return join all elements in num

if __name__ == "main":
    tests = split "1  2  3  4  5  11  65  100  101  272  23456  8007006005004003 123   00123.0   1.23e2" by spaces
    for each num in tests:
        print "{} => {}".format(num, num2ordinal(num))

TENS = [None, None, "twenty", "thirty", "forty",
        "fifty", "sixty", "seventy", "eighty", "ninety"]
SMALL = ["zero", "one", "two", "three", "four", "five",
         "six", "seven", "eight", "nine", "ten", "eleven",
         "twelve", "thirteen", "fourteen", "fifteen",
         "sixteen", "seventeen", "eighteen", "nineteen"]
HUGE = [None, None] + [h + "illion"
                       for h in ("m", "b", "tr", "quadr", "quint", "sext",
                                  "sept", "oct", "non", "dec")]

function nonzero(c, n, connect=''):
    return empty string if n is 0 else connect + c + spell_integer(n)

function last_and(num):
    if ',' is in num:
        pre, last = num.rsplit(',', 1)
        if ' and ' is not in last:
            last = ' and' + last
        num = join pre, ',', last
    return num

function big(e, n):
    if e is 0:
        return spell_integer(n)
    else if e is 1:
        return spell_integer(n) + " thousand"
    else:
        return spell_integer(n) + " " + HUGE[e]

function base1000_rev(n):
    while n is not 0:
        n, r = divide n by 1000
        yield r

function spell_integer(n):
    if n is less than 0:
        return "minus " + spell_integer(-n)
    else if n is less than 20:
        return SMALL[n]
    else if n is less than 100:
        a, b = divide n by 10
        return TENS[a] + nonzero("-", b)
    else if n is less than 1000:
        a, b = divide n by 100
        return SMALL[a] + " hundred" + nonzero(" ", b, ' and')
    else:
        num = join all [big(e, x) for e, x in
                         enumerate(base1000_rev(n)) if x][::-1]
        return last_and(num)
```