```python
from fractions import Fraction
import math

# The n'th order Farey sequence.
def farey(n):
    result = [0]
    a, b, c, d = 0, 1, 1, n
    while c <= n:
        k = math.floor((n + b) / d)
        result.append(Fraction(c, d))
        a, b, c, d = c, d, k * c - a, k * d - b
    return result

# A list of pairs, (n, fn n), where fn is a function applied to the n'th order
# Farey sequence.  We assume the list of orders is increasing.  Only the
# highest order Farey sequence is evaluated; the remainder are generated by
# successively pruning this sequence.
def fareys(fn, ns):
    result = []
    rs = farey(ns[-1])
    for n in reversed(ns):
        rs = [r for r in rs if r.denominator <= n]
        result.append((n, fn(rs)))
    return result

def fprint(fmt, items):
    for item in items:
        print(fmt % item)

def showFracs(rs):
    return ' '.join([f'{r.numerator}/{r.denominator}' for r in rs])

if __name__ == "__main__":
    print("Farey Sequences\n")
    fprint("%2d %s\n", fareys(showFracs, list(range(1, 12))))
    print("\nSequence Lengths\n")
    fprint("%4d %d\n", fareys(len, list(range(100, 1001, 100))))
```