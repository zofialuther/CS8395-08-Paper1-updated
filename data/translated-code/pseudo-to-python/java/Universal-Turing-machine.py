class UTM:
    def __init__(self, transitions, terminalStates, initialState, blankSymbol):
        self.tape = []
        self.blankSymbol = blankSymbol
        self.head = None
        self.transitions = {}
        for t in transitions:
            self.transitions[t.from] = t
        self.terminalStates = terminalStates
        self.initialState = initialState

    class StateTapeSymbolPair:
        def __init__(self, state, tapeSymbol):
            self.state = state
            self.tapeSymbol = tapeSymbol

        def hashCode(self):
            # Auto-generated by Eclipse
            pass

        def equals(self, obj):
            # Auto-generated by Eclipse
            pass

        def toString(self):
            return "(" + self.state + "," + self.tapeSymbol + ")"

    class Transition:
        def __init__(self, fromState, toState, direction):
            self.from = fromState
            self.to = toState
            self.direction = direction

        def toString(self):
            return str(self.from) + "=>" + str(self.to) + "/" + str(self.direction)

    def initializeTape(self, input):
        self.tape = list(input)

    def runTM(self):
        if len(self.tape) == 0:
            self.tape.append(self.blankSymbol)
        self.head = iter(self.tape)
        next(self.head)
        previous = self.head
        tsp = self.StateTapeSymbolPair(self.initialState, self.tape[0])
        while tsp in self.transitions:
            print(str(self) + " --- " + str(self.transitions[tsp]))
            trans = self.transitions[tsp]
            self.head = trans.to.tapeSymbol
            tsp.state = trans.to.state
            if trans.direction == -1:
                if not previous:
                    self.head.appendleft(self.blankSymbol)
                tsp.tapeSymbol = previous
            elif trans.direction == 1:
                next(self.head)
                if not next(self.head):
                    self.head.append(self.blankSymbol)
                    previous = next(self.head)
                tsp.tapeSymbol = next(self.head)
                previous = next(self.head)
            else:
                tsp.tapeSymbol = trans.to.tapeSymbol
        print(str(self) + " --- " + str(tsp))
        if tsp.state in self.terminalStates:
            return self.tape
        else:
            return None

    def toString(self):
        try:
            headPos = self.head.index(previous)
            s = "[ "
            for i in range(headPos):
                s = s + self.tape[i] + " "
            s = s + "[H] "
            for i in range(headPos, len(self.tape)):
                s = s + self.tape[i] + " "
            return s + "]"
        except Exception as e:
            return ""

    def main(self, args):
        init = "q0"
        blank = "b"
        term = {"qf"}
        trans = {
            self.Transition(self.StateTapeSymbolPair("q0", "1"), self.StateTapeSymbolPair("q0", "1"), 1),
            self.Transition(self.StateTapeSymbolPair("q0", "b"), self.StateTapeSymbolPair("qf", "1"), 0)
        }
        machine = self.UTM(trans, term, init, blank)
        machine.initializeTape("111")
        print("Output (si): " + str(machine.runTM()))
        # Continue with other test cases
```